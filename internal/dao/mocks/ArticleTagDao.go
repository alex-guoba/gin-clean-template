// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	dao "github.com/alex-guoba/gin-clean-template/internal/dao"
	mock "github.com/stretchr/testify/mock"
)

// ArticleTagDao is an autogenerated mock type for the ArticleTagDao type
type ArticleTagDao struct {
	mock.Mock
}

// CreateArticleTag provides a mock function with given fields: articleID, tagID, createdBy
func (_m *ArticleTagDao) CreateArticleTag(articleID uint32, tagID uint32, createdBy string) error {
	ret := _m.Called(articleID, tagID, createdBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint32, uint32, string) error); ok {
		r0 = rf(articleID, tagID, createdBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteArticleTag provides a mock function with given fields: articleID
func (_m *ArticleTagDao) DeleteArticleTag(articleID uint32) error {
	ret := _m.Called(articleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint32) error); ok {
		r0 = rf(articleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArticleTagByAID provides a mock function with given fields: articleID
func (_m *ArticleTagDao) GetArticleTagByAID(articleID uint32) (dao.ArticleTagModel, error) {
	ret := _m.Called(articleID)

	var r0 dao.ArticleTagModel
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32) (dao.ArticleTagModel, error)); ok {
		return rf(articleID)
	}
	if rf, ok := ret.Get(0).(func(uint32) dao.ArticleTagModel); ok {
		r0 = rf(articleID)
	} else {
		r0 = ret.Get(0).(dao.ArticleTagModel)
	}

	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(articleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleTagListByAIDs provides a mock function with given fields: articleIDs
func (_m *ArticleTagDao) GetArticleTagListByAIDs(articleIDs []uint32) ([]*dao.ArticleTagModel, error) {
	ret := _m.Called(articleIDs)

	var r0 []*dao.ArticleTagModel
	var r1 error
	if rf, ok := ret.Get(0).(func([]uint32) ([]*dao.ArticleTagModel, error)); ok {
		return rf(articleIDs)
	}
	if rf, ok := ret.Get(0).(func([]uint32) []*dao.ArticleTagModel); ok {
		r0 = rf(articleIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.ArticleTagModel)
		}
	}

	if rf, ok := ret.Get(1).(func([]uint32) error); ok {
		r1 = rf(articleIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleTagListByTID provides a mock function with given fields: tagID
func (_m *ArticleTagDao) GetArticleTagListByTID(tagID uint32) ([]*dao.ArticleTagModel, error) {
	ret := _m.Called(tagID)

	var r0 []*dao.ArticleTagModel
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32) ([]*dao.ArticleTagModel, error)); ok {
		return rf(tagID)
	}
	if rf, ok := ret.Get(0).(func(uint32) []*dao.ArticleTagModel); ok {
		r0 = rf(tagID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.ArticleTagModel)
		}
	}

	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(tagID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArticleTag provides a mock function with given fields: articleID, tagID, modifiedBy
func (_m *ArticleTagDao) UpdateArticleTag(articleID uint32, tagID uint32, modifiedBy string) error {
	ret := _m.Called(articleID, tagID, modifiedBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint32, uint32, string) error); ok {
		r0 = rf(articleID, tagID, modifiedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewArticleTagDao creates a new instance of ArticleTagDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArticleTagDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArticleTagDao {
	mock := &ArticleTagDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
