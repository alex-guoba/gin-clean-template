// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	dao "github.com/alex-guoba/gin-clean-template/internal/dao"
	mock "github.com/stretchr/testify/mock"
)

// ArticleDao is an autogenerated mock type for the ArticleDao type
type ArticleDao struct {
	mock.Mock
}

// CountArticleListByTagID provides a mock function with given fields: id, state
func (_m *ArticleDao) CountArticleListByTagID(id uint32, state uint8) (int64, error) {
	ret := _m.Called(id, state)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32, uint8) (int64, error)); ok {
		return rf(id, state)
	}
	if rf, ok := ret.Get(0).(func(uint32, uint8) int64); ok {
		r0 = rf(id, state)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(uint32, uint8) error); ok {
		r1 = rf(id, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateArticle provides a mock function with given fields: title, desc, content, image, state, createdBy
func (_m *ArticleDao) CreateArticle(title string, desc string, content string, image string, state uint8, createdBy string) (*dao.ArticleModel, error) {
	ret := _m.Called(title, desc, content, image, state, createdBy)

	var r0 *dao.ArticleModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, uint8, string) (*dao.ArticleModel, error)); ok {
		return rf(title, desc, content, image, state, createdBy)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, uint8, string) *dao.ArticleModel); ok {
		r0 = rf(title, desc, content, image, state, createdBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.ArticleModel)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, uint8, string) error); ok {
		r1 = rf(title, desc, content, image, state, createdBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArticle provides a mock function with given fields: id
func (_m *ArticleDao) DeleteArticle(id uint32) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint32) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArticle provides a mock function with given fields: id, state
func (_m *ArticleDao) GetArticle(id uint32, state uint8) (dao.ArticleModel, error) {
	ret := _m.Called(id, state)

	var r0 dao.ArticleModel
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32, uint8) (dao.ArticleModel, error)); ok {
		return rf(id, state)
	}
	if rf, ok := ret.Get(0).(func(uint32, uint8) dao.ArticleModel); ok {
		r0 = rf(id, state)
	} else {
		r0 = ret.Get(0).(dao.ArticleModel)
	}

	if rf, ok := ret.Get(1).(func(uint32, uint8) error); ok {
		r1 = rf(id, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleListByTagID provides a mock function with given fields: id, state, page, pageSize
func (_m *ArticleDao) GetArticleListByTagID(id uint32, state uint8, page int, pageSize int) ([]*dao.ArticleTagRow, error) {
	ret := _m.Called(id, state, page, pageSize)

	var r0 []*dao.ArticleTagRow
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32, uint8, int, int) ([]*dao.ArticleTagRow, error)); ok {
		return rf(id, state, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint32, uint8, int, int) []*dao.ArticleTagRow); ok {
		r0 = rf(id, state, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.ArticleTagRow)
		}
	}

	if rf, ok := ret.Get(1).(func(uint32, uint8, int, int) error); ok {
		r1 = rf(id, state, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArticle provides a mock function with given fields: id, title, desc, content, image, state, modifiedBy
func (_m *ArticleDao) UpdateArticle(id uint32, title string, desc string, content string, image string, state uint8, modifiedBy string) error {
	ret := _m.Called(id, title, desc, content, image, state, modifiedBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint32, string, string, string, string, uint8, string) error); ok {
		r0 = rf(id, title, desc, content, image, state, modifiedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewArticleDao creates a new instance of ArticleDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArticleDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArticleDao {
	mock := &ArticleDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
