// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	dao "github.com/alex-guoba/gin-clean-template/internal/dao"
	mock "github.com/stretchr/testify/mock"
)

// TagDao is an autogenerated mock type for the TagDao type
type TagDao struct {
	mock.Mock
}

// CountTag provides a mock function with given fields: name, state
func (_m *TagDao) CountTag(name string, state uint8) (int64, error) {
	ret := _m.Called(name, state)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint8) (int64, error)); ok {
		return rf(name, state)
	}
	if rf, ok := ret.Get(0).(func(string, uint8) int64); ok {
		r0 = rf(name, state)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, uint8) error); ok {
		r1 = rf(name, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTag provides a mock function with given fields: name, state, createdBy
func (_m *TagDao) CreateTag(name string, state uint8, createdBy string) error {
	ret := _m.Called(name, state, createdBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint8, string) error); ok {
		r0 = rf(name, state, createdBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTag provides a mock function with given fields: id
func (_m *TagDao) DeleteTag(id uint32) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint32) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTag provides a mock function with given fields: id, state
func (_m *TagDao) GetTag(id uint32, state uint8) (dao.TagModel, error) {
	ret := _m.Called(id, state)

	var r0 dao.TagModel
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32, uint8) (dao.TagModel, error)); ok {
		return rf(id, state)
	}
	if rf, ok := ret.Get(0).(func(uint32, uint8) dao.TagModel); ok {
		r0 = rf(id, state)
	} else {
		r0 = ret.Get(0).(dao.TagModel)
	}

	if rf, ok := ret.Get(1).(func(uint32, uint8) error); ok {
		r1 = rf(id, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagList provides a mock function with given fields: name, state, page, pageSize
func (_m *TagDao) GetTagList(name string, state uint8, page int, pageSize int) ([]*dao.TagModel, error) {
	ret := _m.Called(name, state, page, pageSize)

	var r0 []*dao.TagModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint8, int, int) ([]*dao.TagModel, error)); ok {
		return rf(name, state, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, uint8, int, int) []*dao.TagModel); ok {
		r0 = rf(name, state, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.TagModel)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint8, int, int) error); ok {
		r1 = rf(name, state, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagListByIDs provides a mock function with given fields: ids, state
func (_m *TagDao) GetTagListByIDs(ids []uint32, state uint8) ([]*dao.TagModel, error) {
	ret := _m.Called(ids, state)

	var r0 []*dao.TagModel
	var r1 error
	if rf, ok := ret.Get(0).(func([]uint32, uint8) ([]*dao.TagModel, error)); ok {
		return rf(ids, state)
	}
	if rf, ok := ret.Get(0).(func([]uint32, uint8) []*dao.TagModel); ok {
		r0 = rf(ids, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.TagModel)
		}
	}

	if rf, ok := ret.Get(1).(func([]uint32, uint8) error); ok {
		r1 = rf(ids, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTag provides a mock function with given fields: id, name, state, modifiedBy
func (_m *TagDao) UpdateTag(id uint32, name string, state uint8, modifiedBy string) error {
	ret := _m.Called(id, name, state, modifiedBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint32, string, uint8, string) error); ok {
		r0 = rf(id, name, state, modifiedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTagDao creates a new instance of TagDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTagDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *TagDao {
	mock := &TagDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
