# Details see : https://golangci-lint.run/usage/configuration/

# Options for analysis running.
run:
  timeout: 10m
  issues-exit-code: 5

linters:
  enable:
    - errcheck
    - goimports
    - revive
    - govet
    - staticcheck
    - misspell
    - gocritic
    - sqlclosecheck
    - rowserrcheck
    - nilerr
    - godot
    - forbidigo
    - mirror
    - bodyclose

issues:
  include:
    # https://golangci-lint.run/usage/configuration/#command-line-options
  exclude:
    - Rollback
    - logger.Sync
    - pgInstance.Stop
    - fmt.Printf
    - Enter(.*)_(.*)
    - Exit(.*)_(.*)

linters-settings:
  goimports:
    # Put imports beginning with prefix after 3rd-party packages.
    local-prefixes: github.com/alex-guoba/gin-clean-template
  revive:
    # Default to run all linters so that new rules in the future could automatically be added to the static check.
    enable-all-rules: true
    rules:
      # The following rules are too strict and make coding harder. We do not enable them for now.
      - name: file-header
        disabled: true
      - name: line-length-limit
        disabled: true
      - name: function-length
        disabled: true
      - name: max-public-structs
        disabled: true
      - name: function-result-limit
        disabled: true
      - name: banned-characters
        disabled: true
      - name: argument-limit
        disabled: true
      - name: cognitive-complexity
        disabled: true
      - name: cyclomatic
        disabled: true
      - name: confusing-results
        disabled: true
      - name: add-constant
        disabled: true
      - name: flag-parameter
        disabled: true
      - name: nested-structs
        disabled: true
      - name: import-shadowing
        disabled: true
      - name: early-return
        disabled: true
      - name: deep-exit
        disabled: true
  gocritic:
    disabled-checks:
      - ifElseChain
  govet:
    settings:
      printf: # The name of the analyzer, run `go tool vet help` to see the list of all analyzers
        funcs: # Run `go tool vet help printf` to see the full configuration of `printf`.
          - common.Errorf
    enable-all: true
    disable:
      - fieldalignment
      - shadow
  forbidigo:
    forbid:
      - 'fmt\.Errorf(# Please use errors\.Wrap\|Wrapf\|Errorf instead)?'
      - 'ioutil\.ReadDir(# Please use os\.ReadDir)?'
  godot:
    # Check that each sentence ends with a period.
    # Default: true
    period: false

output:
  # Format: colored-line-number|line-number|json|colored-tab|tab|checkstyle|code-climate|junit-xml|github-actions|teamcity
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.xml,json:stdout,colored-line-number"
  #
  # Default: colored-line-number
  # format: json
  # Print lines of code with issue.
  # Default: true
  print-issued-lines: true
  # Print linter name in the end of issue text.
  # Default: true
  print-linter-name: true
  # Make issues output unique by line.
  # Default: true
  uniq-by-line: true
  # Add a prefix to the output file references.
  # Default: ""
  path-prefix: "\n"
  # Sort results by: filepath, line and column.
  # Default: false
  sort-results: true